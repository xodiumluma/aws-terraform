---
subcategory: "Batch"
layout: "aws"
page_title: "AWS: aws_batch_job_definition"
description: |-
  Provides a Batch Job Definition resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_batch_job_definition

Provides a Batch Job Definition resource.

## Example Usage

### Job definition of type container

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BatchJobDefinition } from "./.gen/providers/aws/batch-job-definition";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new BatchJobDefinition(this, "test", {
      containerProperties: Token.asString(
        Fn.jsonencode({
          command: ["ls", "-la"],
          environment: [
            {
              name: "VARNAME",
              value: "VARVAL",
            },
          ],
          image: "busybox",
          mountPoints: [
            {
              containerPath: "/tmp",
              readOnly: false,
              sourceVolume: "tmp",
            },
          ],
          resourceRequirements: [
            {
              type: "VCPU",
              value: "0.25",
            },
            {
              type: "MEMORY",
              value: "512",
            },
          ],
          ulimits: [
            {
              hardLimit: 1024,
              name: "nofile",
              softLimit: 1024,
            },
          ],
          volumes: [
            {
              host: {
                sourcePath: "/tmp",
              },
              name: "tmp",
            },
          ],
        })
      ),
      name: "tf_test_batch_job_definition",
      type: "container",
    });
  }
}

```

### Job definition of type multinode

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BatchJobDefinition } from "./.gen/providers/aws/batch-job-definition";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new BatchJobDefinition(this, "test", {
      name: "tf_test_batch_job_definition_multinode",
      nodeProperties: Token.asString(
        Fn.jsonencode({
          mainNode: 0,
          nodeRangeProperties: [
            {
              container: {
                command: ["ls", "-la"],
                image: "busybox",
                memory: 128,
                vcpus: 1,
              },
              targetNodes: "0:",
            },
            {
              container: {
                command: ["echo", "test"],
                image: "busybox",
                memory: 128,
                vcpus: 1,
              },
              targetNodes: "1:",
            },
          ],
          numNodes: 2,
        })
      ),
      type: "multinode",
    });
  }
}

```

### Fargate Platform Capability

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BatchJobDefinition } from "./.gen/providers/aws/batch-job-definition";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicyAttachment } from "./.gen/providers/aws/iam-role-policy-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const assumeRolePolicy = new DataAwsIamPolicyDocument(
      this,
      "assume_role_policy",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            principals: [
              {
                identifiers: ["ecs-tasks.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    const ecsTaskExecutionRole = new IamRole(this, "ecs_task_execution_role", {
      assumeRolePolicy: Token.asString(assumeRolePolicy.json),
      name: "tf_test_batch_exec_role",
    });
    new IamRolePolicyAttachment(this, "ecs_task_execution_role_policy", {
      policyArn:
        "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
      role: ecsTaskExecutionRole.name,
    });
    new BatchJobDefinition(this, "test", {
      containerProperties: Token.asString(
        Fn.jsonencode({
          command: ["echo", "test"],
          executionRoleArn: ecsTaskExecutionRole.arn,
          fargatePlatformConfiguration: {
            platformVersion: "LATEST",
          },
          image: "busybox",
          jobRoleArn: "arn:aws:iam::123456789012:role/AWSBatchS3ReadOnly",
          resourceRequirements: [
            {
              type: "VCPU",
              value: "0.25",
            },
            {
              type: "MEMORY",
              value: "512",
            },
          ],
        })
      ),
      name: "tf_test_batch_job_definition",
      platformCapabilities: ["FARGATE"],
      type: "container",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) Specifies the name of the job definition.
* `type` - (Required) The type of job definition. Must be `container` or `multinode`.

The following arguments are optional:

* `containerProperties` - (Optional) A valid [container properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html)
    provided as a single valid JSON document. This parameter is required if the `type` parameter is `container`.
* `nodeProperties` - (Optional) A valid [node properties](http://docs.aws.amazon.com/batch/latest/APIReference/API_RegisterJobDefinition.html)
    provided as a single valid JSON document. This parameter is required if the `type` parameter is `multinode`.
* `parameters` - (Optional) Specifies the parameter substitution placeholders to set in the job definition.
* `platformCapabilities` - (Optional) The platform capabilities required by the job definition. If no value is specified, it defaults to `EC2`. To run the job on Fargate resources, specify `FARGATE`.
* `propagateTags` - (Optional) Specifies whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is `false`.
* `retryStrategy` - (Optional) Specifies the retry strategy to use for failed jobs that are submitted with this job definition.
    Maximum number of `retry_strategy` is `1`.  Defined below.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `timeout` - (Optional) Specifies the timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of `timeout` is `1`. Defined below.

### retry_strategy

* `attempts` - (Optional) The number of times to move a job to the `RUNNABLE` status. You may specify between `1` and `10` attempts.
* `evaluateOnExit` - (Optional) The [evaluate on exit](#evaluate_on_exit) conditions under which the job should be retried or failed. If this parameter is specified, then the `attempts` parameter must also be specified. You may specify up to 5 configuration blocks.

#### evaluate_on_exit

* `action` - (Required) Specifies the action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: `RETRY`, `EXIT`.
* `onExitCode` - (Optional) A glob pattern to match against the decimal representation of the exit code returned for a job.
* `onReason` - (Optional) A glob pattern to match against the reason returned for a job.
* `onStatusReason` - (Optional) A glob pattern to match against the status reason returned for a job.

### timeout

* `attemptDurationSeconds` - (Optional) The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60` seconds.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The Amazon Resource Name of the job definition.
* `revision` - The revision of the job definition.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Batch Job Definition using the `arn`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
  }
}

```

Using `terraform import`, import Batch Job Definition using the `arn`. For example:

```console
% terraform import aws_batch_job_definition.test arn:aws:batch:us-east-1:123456789012:job-definition/sample
```

<!-- cache-key: cdktf-0.19.0 input-6875712bbffb016dedfe19893cba22e65a8cb48a90c99297983075f630c3e600 -->