---
subcategory: "Glue"
layout: "aws"
page_title: "AWS: aws_glue_data_catalog_encryption_settings"
description: |-
  Provides a Glue Data Catalog Encryption Settings resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_glue_data_catalog_encryption_settings

Provides a Glue Data Catalog Encryption Settings resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueDataCatalogEncryptionSettings } from "./.gen/providers/aws/glue-data-catalog-encryption-settings";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueDataCatalogEncryptionSettings(this, "example", {
      dataCatalogEncryptionSettings: {
        connectionPasswordEncryption: {
          awsKmsKeyId: test.arn,
          returnConnectionPasswordEncrypted: true,
        },
        encryptionAtRest: {
          catalogEncryptionMode: "SSE-KMS",
          sseAwsKmsKeyId: test.arn,
        },
      },
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `dataCatalogEncryptionSettings` – (Required) The security configuration to set. see [Data Catalog Encryption Settings](#data_catalog_encryption_settings).
* `catalogId` – (Optional) The ID of the Data Catalog to set the security configuration for. If none is provided, the AWS account ID is used by default.

### data_catalog_encryption_settings

* `connectionPasswordEncryption` - (Required) When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see [Connection Password Encryption](#connection_password_encryption).
* `encryptionAtRest` - (Required) Specifies the encryption-at-rest configuration for the Data Catalog. see [Encryption At Rest](#encryption_at_rest).

### connection_password_encryption

* `returnConnectionPasswordEncrypted` - (Required) When set to `true`, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
* `awsKmsKeyId` - (Optional) A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least `kms:Encrypt` permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.

### encryption_at_rest

* `catalogEncryptionMode` - (Required) The encryption-at-rest mode for encrypting Data Catalog data. Valid values are `DISABLED` and `SSE-KMS`.
* `sseAwsKmsKeyId` - (Optional) The ARN of the AWS KMS key to use for encryption at rest.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the Data Catalog to set the security configuration for.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glue Data Catalog Encryption Settings using `catalogId` (AWS account ID if not custom). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
  }
}

```

Using `terraform import`, import Glue Data Catalog Encryption Settings using `catalogId` (AWS account ID if not custom). For example:

```console
% terraform import aws_glue_data_catalog_encryption_settings.example 123456789012
```

<!-- cache-key: cdktf-0.19.0 input-c2e85f7ebdcf7cc062a847481555cf88d0fa1324f7ad5edd2567de866f418d1e -->