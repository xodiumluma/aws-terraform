---
subcategory: "ECR (Elastic Container Registry)"
layout: "aws"
page_title: "AWS: aws_ecr_lifecycle_policy"
description: |-
  Manages an ECR repository lifecycle policy.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ecr_lifecycle_policy

Manages an ECR repository lifecycle policy.

~> **NOTE:** Only one `awsEcrLifecyclePolicy` resource can be used with the same ECR repository. To apply multiple rules, they must be combined in the `policy` JSON.

~> **NOTE:** The AWS ECR API seems to reorder rules based on `rulePriority`. If you define multiple rules that are not sorted in ascending `rulePriority` order in the Terraform code, the resource will be flagged for recreation every `terraform plan`.

## Example Usage

### Policy on untagged image

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcrLifecyclePolicy } from "./.gen/providers/aws/ecr-lifecycle-policy";
import { EcrRepository } from "./.gen/providers/aws/ecr-repository";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const foo = new EcrRepository(this, "foo", {
      name: "bar",
    });
    new EcrLifecyclePolicy(this, "foopolicy", {
      policy:
        '{\n    "rules": [\n        {\n            "rulePriority": 1,\n            "description": "Expire images older than 14 days",\n            "selection": {\n                "tagStatus": "untagged",\n                "countType": "sinceImagePushed",\n                "countUnit": "days",\n                "countNumber": 14\n            },\n            "action": {\n                "type": "expire"\n            }\n        }\n    ]\n}\n\n',
      repository: foo.name,
    });
  }
}

```

### Policy on tagged image

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcrLifecyclePolicy } from "./.gen/providers/aws/ecr-lifecycle-policy";
import { EcrRepository } from "./.gen/providers/aws/ecr-repository";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const foo = new EcrRepository(this, "foo", {
      name: "bar",
    });
    new EcrLifecyclePolicy(this, "foopolicy", {
      policy:
        '{\n    "rules": [\n        {\n            "rulePriority": 1,\n            "description": "Keep last 30 images",\n            "selection": {\n                "tagStatus": "tagged",\n                "tagPrefixList": ["v"],\n                "countType": "imageCountMoreThan",\n                "countNumber": 30\n            },\n            "action": {\n                "type": "expire"\n            }\n        }\n    ]\n}\n\n',
      repository: foo.name,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `repository` - (Required) Name of the repository to apply the policy.
* `policy` - (Required) The policy document. This is a JSON formatted string. See more details about [Policy Parameters](http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters) in the official AWS docs.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `repository` - The name of the repository.
* `registryId` - The registry ID where the repository was created.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ECR Lifecycle Policy using the name of the repository. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
  }
}

```

Using `terraform import`, import ECR Lifecycle Policy using the name of the repository. For example:

```console
% terraform import aws_ecr_lifecycle_policy.example tf-example
```

<!-- cache-key: cdktf-0.19.0 input-0e4c7e8c7cdaee9fd0d8211aaa75d4db1e461d9cccef8d7c28f406dede927735 -->