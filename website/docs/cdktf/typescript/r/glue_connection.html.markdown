---
subcategory: "Glue"
layout: "aws"
page_title: "AWS: aws_glue_connection"
description: |-
  Provides an Glue Connection resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_glue_connection

Provides a Glue Connection resource.

## Example Usage

### Non-VPC Connection

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueConnection } from "./.gen/providers/aws/glue-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueConnection(this, "example", {
      connectionProperties: {
        JDBC_CONNECTION_URL: "jdbc:mysql://example.com/exampledatabase",
        PASSWORD: "examplepassword",
        USERNAME: "exampleusername",
      },
      name: "example",
    });
  }
}

```

### Non-VPC Connection with secret manager reference

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsSecretmanagerSecret } from "./.gen/providers/aws/";
import { GlueConnection } from "./.gen/providers/aws/glue-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsSecretmanagerSecret(this, "example", {
      name: "example-secret",
    });
    const awsGlueConnectionExample = new GlueConnection(this, "example_1", {
      connectionProperties: {
        JDBC_CONNECTION_URL: "jdbc:mysql://example.com/exampledatabase",
        SECRET_ID: Token.asString(example.name),
      },
      name: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsGlueConnectionExample.overrideLogicalId("example");
  }
}

```

### VPC Connection

For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/populate-add-connection.html#connection-JDBC-VPC).

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueConnection } from "./.gen/providers/aws/glue-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueConnection(this, "example", {
      connectionProperties: {
        JDBC_CONNECTION_URL:
          "jdbc:mysql://${" +
          awsRdsClusterExample.endpoint +
          "}/exampledatabase",
        PASSWORD: "examplepassword",
        USERNAME: "exampleusername",
      },
      name: "example",
      physicalConnectionRequirements: {
        availabilityZone: Token.asString(awsSubnetExample.availabilityZone),
        securityGroupIdList: [Token.asString(awsSecurityGroupExample.id)],
        subnetId: Token.asString(awsSubnetExample.id),
      },
    });
  }
}

```

### Connection using a custom connector

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsSecretmanagerSecret } from "./.gen/providers/aws/";
import { GlueConnection } from "./.gen/providers/aws/glue-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const exampleConnector = new GlueConnection(this, "example_connector", {
      connectionProperties: {
        CONNECTION_TYPE: "Jdbc",
        CONNECTOR_CLASS_NAME: "net.snowflake.client.jdbc.SnowflakeDriver",
        CONNECTOR_URL: "s3://example/snowflake-jdbc.jar",
        JDBC_CONNECTION_URL:
          '[[\\"default=jdbc:snowflake://example.com/?user=$${user}&password=$${password}\\"],\\",\\"]',
      },
      connectionType: "CUSTOM",
      matchCriteria: ["template-connection"],
      name: "example_connector",
    });
    const example = new DataAwsSecretmanagerSecret(this, "example", {
      name: "example-secret",
    });
    new GlueConnection(this, "example_connection", {
      connectionProperties: {
        CONNECTION_TYPE: "Jdbc",
        CONNECTOR_CLASS_NAME: "net.snowflake.client.jdbc.SnowflakeDriver",
        CONNECTOR_URL: "s3://example/snowflake-jdbc.jar",
        JDBC_CONNECTION_URL:
          "jdbc:snowflake://example.com/?user=$${user}&password=$${password}",
        SECRET_ID: Token.asString(example.name),
      },
      connectionType: "CUSTOM",
      matchCriteria: ["Connection", exampleConnector.name],
      name: "example",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `catalogId` – (Optional) The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
* `connectionProperties` – (Optional) A map of key-value pairs used as parameters for this connection.
* `connectionType` – (Optional) The type of the connection. Supported are: `CUSTOM`, `JDBC`, `KAFKA`, `MARKETPLACE`, `MONGODB`, and `NETWORK`. Defaults to `JDBC`.
* `description` – (Optional) Description of the connection.
* `matchCriteria` – (Optional) A list of criteria that can be used in selecting this connection.
* `name` – (Required) The name of the connection.
* `physicalConnectionRequirements` - (Optional) A map of physical connection requirements, such as VPC and SecurityGroup. Defined below.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### physical_connection_requirements

* `availabilityZone` - (Optional) The availability zone of the connection. This field is redundant and implied by `subnet_id`, but is currently an api requirement.
* `securityGroupIdList` - (Optional) The security group ID list used by the connection.
* `subnetId` - (Optional) The subnet ID used by the connection.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Catalog ID and name of the connection
* `arn` - The ARN of the Glue Connection.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glue Connections using the `catalogId` (AWS account ID if not custom) and `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
  }
}

```

Using `terraform import`, import Glue Connections using the `catalogId` (AWS account ID if not custom) and `name`. For example:

```console
% terraform import aws_glue_connection.MyConnection 123456789012:MyConnection
```

<!-- cache-key: cdktf-0.19.0 input-78ae01c7f8d6fb137f4b265db70e2caa87ccd65058b4e331423436b8a1ced095 -->