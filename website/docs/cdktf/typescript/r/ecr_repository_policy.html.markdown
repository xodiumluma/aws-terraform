---
subcategory: "ECR (Elastic Container Registry)"
layout: "aws"
page_title: "AWS: aws_ecr_repository_policy"
description: |-
  Provides an Elastic Container Registry Repository Policy.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ecr_repository_policy

Provides an Elastic Container Registry Repository Policy.

Note that currently only one policy may be applied to a repository.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { EcrRepository } from "./.gen/providers/aws/ecr-repository";
import { EcrRepositoryPolicy } from "./.gen/providers/aws/ecr-repository-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const foo = new EcrRepository(this, "foo", {
      name: "bar",
    });
    const foopolicy = new DataAwsIamPolicyDocument(this, "foopolicy", {
      statement: [
        {
          actions: [
            "ecr:GetDownloadUrlForLayer",
            "ecr:BatchGetImage",
            "ecr:BatchCheckLayerAvailability",
            "ecr:PutImage",
            "ecr:InitiateLayerUpload",
            "ecr:UploadLayerPart",
            "ecr:CompleteLayerUpload",
            "ecr:DescribeRepositories",
            "ecr:GetRepositoryPolicy",
            "ecr:ListImages",
            "ecr:DeleteRepository",
            "ecr:BatchDeleteImage",
            "ecr:SetRepositoryPolicy",
            "ecr:DeleteRepositoryPolicy",
          ],
          effect: "Allow",
          principals: [
            {
              identifiers: ["123456789012"],
              type: "AWS",
            },
          ],
          sid: "new policy",
        },
      ],
    });
    const awsEcrRepositoryPolicyFoopolicy = new EcrRepositoryPolicy(
      this,
      "foopolicy_2",
      {
        policy: Token.asString(foopolicy.json),
        repository: foo.name,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsEcrRepositoryPolicyFoopolicy.overrideLogicalId("foopolicy");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `repository` - (Required) Name of the repository to apply the policy.
* `policy` - (Required) The policy document. This is a JSON formatted string. For more information about building IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://learn.hashicorp.com/terraform/aws/iam-policy)

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `repository` - The name of the repository.
* `registryId` - The registry ID where the repository was created.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ECR Repository Policy using the repository name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
  }
}

```

Using `terraform import`, import ECR Repository Policy using the repository name. For example:

```console
% terraform import aws_ecr_repository_policy.example example
```

<!-- cache-key: cdktf-0.19.0 input-0bb26796a34294f42562707b8dbdd994b19d2487ea08fdd2ae6fdedbc68aee00 -->