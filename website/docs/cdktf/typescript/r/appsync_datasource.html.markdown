---
subcategory: "AppSync"
layout: "aws"
page_title: "AWS: aws_appsync_datasource"
description: |-
  Provides an AppSync Data Source.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_appsync_datasource

Provides an AppSync Data Source.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppsyncDatasource } from "./.gen/providers/aws/appsync-datasource";
import { AppsyncGraphqlApi } from "./.gen/providers/aws/appsync-graphql-api";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DynamodbTable } from "./.gen/providers/aws/dynamodb-table";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new AppsyncGraphqlApi(this, "example", {
      authenticationType: "API_KEY",
      name: "tf_appsync_example",
    });
    const awsDynamodbTableExample = new DynamodbTable(this, "example_1", {
      attribute: [
        {
          name: "UserId",
          type: "S",
        },
      ],
      hashKey: "UserId",
      name: "example",
      readCapacity: 1,
      writeCapacity: 1,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDynamodbTableExample.overrideLogicalId("example");
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["appsync.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const dataAwsIamPolicyDocumentExample = new DataAwsIamPolicyDocument(
      this,
      "example_3",
      {
        statement: [
          {
            actions: ["dynamodb:*"],
            effect: "Allow",
            resources: [Token.asString(awsDynamodbTableExample.arn)],
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentExample.overrideLogicalId("example");
    const awsIamRoleExample = new IamRole(this, "example_4", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleExample.overrideLogicalId("example");
    const awsIamRolePolicyExample = new IamRolePolicy(this, "example_5", {
      name: "example",
      policy: Token.asString(dataAwsIamPolicyDocumentExample.json),
      role: Token.asString(awsIamRoleExample.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyExample.overrideLogicalId("example");
    const awsAppsyncDatasourceExample = new AppsyncDatasource(
      this,
      "example_6",
      {
        apiId: example.id,
        dynamodbConfig: {
          tableName: Token.asString(awsDynamodbTableExample.name),
        },
        name: "tf_appsync_example",
        serviceRoleArn: Token.asString(awsIamRoleExample.arn),
        type: "AMAZON_DYNAMODB",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAppsyncDatasourceExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `apiId` - (Required) API ID for the GraphQL API for the data source.
* `name` - (Required) User-supplied name for the data source.
* `type` - (Required) Type of the Data Source. Valid values: `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `HTTP`, `NONE`, `RELATIONAL_DATABASE`, `AMAZON_EVENTBRIDGE`, `AMAZON_OPENSEARCH_SERVICE`.
* `description` - (Optional) Description of the data source.
* `dynamodbConfig` - (Optional) DynamoDB settings. See [DynamoDB Config](#dynamodb-config)
* `elasticsearchConfig` - (Optional) Amazon Elasticsearch settings. See [ElasticSearch Config](#elasticsearch-config)
* `eventBridgeConfig` - (Optional) AWS EventBridge settings. See [Event Bridge Config](#event-bridge-config)
* `httpConfig` - (Optional) HTTP settings. See [HTTP Config](#http-config)
* `lambdaConfig` - (Optional) AWS Lambda settings. See [Lambda Config](#lambda-config)
* `opensearchserviceConfig` - (Optional) Amazon OpenSearch Service settings. See [OpenSearch Service Config](#opensearch-service-config)
* `relationalDatabaseConfig` (Optional) AWS RDS settings. See [Relational Database Config](#relational-database-config)
* `serviceRoleArn` - (Optional) IAM service role ARN for the data source. Required if `type` is specified as `AWS_LAMBDA`, `AMAZON_DYNAMODB`, `AMAZON_ELASTICSEARCH`, `AMAZON_EVENTBRIDGE`, or `AMAZON_OPENSEARCH_SERVICE`.

### DynamoDB Config

This argument supports the following arguments:

* `tableName` - (Required) Name of the DynamoDB table.
* `region` - (Optional) AWS region of the DynamoDB table. Defaults to current region.
* `useCallerCredentials` - (Optional) Set to `true` to use Amazon Cognito credentials with this data source.
* `deltaSyncConfig` - (Optional) The DeltaSyncConfig for a versioned data source. See [Delta Sync Config](#delta-sync-config)
* `versioned` - (Optional) Detects Conflict Detection and Resolution with this data source.

### Delta Sync Config

* `baseTableTtl` - (Optional) The number of minutes that an Item is stored in the data source.
* `deltaSyncTableName` - (Required) The table name.
* `deltaSyncTableTtl` - (Optional) The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.

### ElasticSearch Config

This argument supports the following arguments:

* `endpoint` - (Required) HTTP endpoint of the Elasticsearch domain.
* `region` - (Optional) AWS region of Elasticsearch domain. Defaults to current region.

### Event Bridge Config

This argument supports the following arguments:

* `eventBusArn` - (Required) ARN for the EventBridge bus.

### HTTP Config

This argument supports the following arguments:

* `endpoint` - (Required) HTTP URL.
* `authorizationConfig` - (Optional) Authorization configuration in case the HTTP endpoint requires authorization. See [Authorization Config](#authorization-config).

#### Authorization Config

This argument supports the following arguments:

* `authorizationType` - (Optional) Authorization type that the HTTP endpoint requires. Default values is `AWS_IAM`.
* `awsIamConfig` - (Optional) Identity and Access Management (IAM) settings. See [AWS IAM Config](#aws-iam-config).

##### AWS IAM Config

This argument supports the following arguments:

* `signingRegion` - (Optional) Signing Amazon Web Services Region for IAM authorization.
* `signingServiceName`- (Optional) Signing service name for IAM authorization.

### Lambda Config

This argument supports the following arguments:

* `functionArn` - (Required) ARN for the Lambda function.

### OpenSearch Service Config

This argument supports the following arguments:

* `endpoint` - (Required) HTTP endpoint of the OpenSearch domain.
* `region` - (Optional) AWS region of the OpenSearch domain. Defaults to current region.

### Relational Database Config

This argument supports the following arguments:

* `httpEndpointConfig` - (Required) Amazon RDS HTTP endpoint configuration. See [HTTP Endpoint Config](#http-endpoint-config).
* `sourceType` - (Optional) Source type for the relational database. Valid values: `RDS_HTTP_ENDPOINT`.

#### HTTP Endpoint Config

This argument supports the following arguments:

* `dbClusterIdentifier` - (Required) Amazon RDS cluster identifier.
* `awsSecretStoreArn` - (Required) AWS secret store ARN for database credentials.
* `databaseName` - (Optional) Logical database name.
* `region` - (Optional) AWS Region for RDS HTTP endpoint. Defaults to current region.
* `schema` - (Optional) Logical schema name.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `awsAppsyncDatasource` using the `apiId`, a hyphen, and `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
  }
}

```

Using `terraform import`, import `awsAppsyncDatasource` using the `apiId`, a hyphen, and `name`. For example:

```console
% terraform import aws_appsync_datasource.example abcdef123456-example
```

<!-- cache-key: cdktf-0.19.0 input-a9f04a5458c9f7419be950e393980c31263681e22e413dc9419e676476b092d0 -->