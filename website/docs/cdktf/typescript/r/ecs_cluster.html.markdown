---
subcategory: "ECS (Elastic Container)"
layout: "aws"
page_title: "AWS: aws_ecs_cluster"
description: |-
  Provides an ECS cluster.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ecs_cluster

Provides an ECS cluster.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcsCluster } from "./.gen/providers/aws/ecs-cluster";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new EcsCluster(this, "foo", {
      name: "white-hart",
      setting: [
        {
          name: "containerInsights",
          value: "enabled",
        },
      ],
    });
  }
}

```

### Example with Log Configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchLogGroup } from "./.gen/providers/aws/cloudwatch-log-group";
import { EcsCluster } from "./.gen/providers/aws/ecs-cluster";
import { KmsKey } from "./.gen/providers/aws/kms-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new CloudwatchLogGroup(this, "example", {
      name: "example",
    });
    const awsKmsKeyExample = new KmsKey(this, "example_1", {
      deletionWindowInDays: 7,
      description: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKmsKeyExample.overrideLogicalId("example");
    new EcsCluster(this, "test", {
      configuration: {
        executeCommandConfiguration: {
          kmsKeyId: Token.asString(awsKmsKeyExample.arn),
          logConfiguration: {
            cloudWatchEncryptionEnabled: true,
            cloudWatchLogGroupName: example.name,
          },
          logging: "OVERRIDE",
        },
      },
      name: "example",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `configuration` - (Optional) The execute command configuration for the cluster. Detailed below.
* `name` - (Required) Name of the cluster (up to 255 letters, numbers, hyphens, and underscores)
* `serviceConnectDefaults` - (Optional) Configures a default Service Connect namespace. Detailed below.
* `setting` - (Optional) Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. Detailed below.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `configuration`

* `executeCommandConfiguration` - (Optional) The details of the execute command configuration. Detailed below.

#### `executeCommandConfiguration`

* `kmsKeyId` - (Optional) The AWS Key Management Service key ID to encrypt the data between the local client and the container.
* `logConfiguration` - (Optional) The log configuration for the results of the execute command actions Required when `logging` is `OVERRIDE`. Detailed below.
* `logging` - (Optional) The log setting to use for redirecting logs for your execute command results. Valid values are `NONE`, `DEFAULT`, and `OVERRIDE`.

##### `logConfiguration`

* `cloudWatchEncryptionEnabled` - (Optional) Whether or not to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
* `cloudWatchLogGroupName` - (Optional) The name of the CloudWatch log group to send logs to.
* `s3BucketName` - (Optional) The name of the S3 bucket to send logs to.
* `s3BucketEncryptionEnabled` - (Optional) Whether or not to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
* `s3KeyPrefix` - (Optional) An optional folder in the S3 bucket to place logs in.

### `setting`

* `name` - (Required) Name of the setting to manage. Valid values: `containerInsights`.
* `value` -  (Required) The value to assign to the setting. Valid values are `enabled` and `disabled`.

### `serviceConnectDefaults`

* `namespace` - (Required) The ARN of the [`aws_service_discovery_http_namespace`](/docs/providers/aws/r/service_discovery_http_namespace.html) that's used when you create a service and don't specify a Service Connect configuration.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN that identifies the cluster.
* `id` - ARN that identifies the cluster.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ECS clusters using the `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
  }
}

```

Using `terraform import`, import ECS clusters using the `name`. For example:

```console
% terraform import aws_ecs_cluster.stateless stateless-app
```

<!-- cache-key: cdktf-0.19.0 input-1154f096b3c84b6ef18254400c16ed7229ee1dd00d8545d69ff1e3a5e359aa99 -->