---
subcategory: "AppSync"
layout: "aws"
page_title: "AWS: aws_appsync_graphql_api"
description: |-
  Provides an AppSync GraphQL API.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_appsync_graphql_api

Provides an AppSync GraphQL API.

## Example Usage

### API Key Authentication

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.appsync_graphql_api import AppsyncGraphqlApi
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AppsyncGraphqlApi(self, "example",
            authentication_type="API_KEY",
            name="example"
        )
```

### AWS IAM Authentication

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.appsync_graphql_api import AppsyncGraphqlApi
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AppsyncGraphqlApi(self, "example",
            authentication_type="AWS_IAM",
            name="example"
        )
```

### AWS Cognito User Pool Authentication

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.appsync_graphql_api import AppsyncGraphqlApi
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AppsyncGraphqlApi(self, "example",
            authentication_type="AMAZON_COGNITO_USER_POOLS",
            name="example",
            user_pool_config=AppsyncGraphqlApiUserPoolConfig(
                aws_region=Token.as_string(current.name),
                default_action="DENY",
                user_pool_id=Token.as_string(aws_cognito_user_pool_example.id)
            )
        )
```

### OpenID Connect Authentication

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.appsync_graphql_api import AppsyncGraphqlApi
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AppsyncGraphqlApi(self, "example",
            authentication_type="OPENID_CONNECT",
            name="example",
            openid_connect_config=AppsyncGraphqlApiOpenidConnectConfig(
                issuer="https://example.com"
            )
        )
```

### AWS Lambda Authorizer Authentication

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.appsync_graphql_api import AppsyncGraphqlApi
from imports.aws.lambda_permission import LambdaPermission
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = AppsyncGraphqlApi(self, "example",
            authentication_type="AWS_LAMBDA",
            lambda_authorizer_config=AppsyncGraphqlApiLambdaAuthorizerConfig(
                authorizer_uri="arn:aws:lambda:us-east-1:123456789012:function:custom_lambda_authorizer"
            ),
            name="example"
        )
        LambdaPermission(self, "appsync_lambda_authorizer",
            action="lambda:InvokeFunction",
            function_name="custom_lambda_authorizer",
            principal="appsync.amazonaws.com",
            source_arn=example.arn,
            statement_id="appsync_lambda_authorizer"
        )
```

### With Multiple Authentication Providers

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.appsync_graphql_api import AppsyncGraphqlApi
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AppsyncGraphqlApi(self, "example",
            additional_authentication_provider=[AppsyncGraphqlApiAdditionalAuthenticationProvider(
                authentication_type="AWS_IAM"
            )
            ],
            authentication_type="API_KEY",
            name="example"
        )
```

### With Schema

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.appsync_graphql_api import AppsyncGraphqlApi
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AppsyncGraphqlApi(self, "example",
            authentication_type="AWS_IAM",
            name="example",
            schema="schema {\n\tquery: Query\n}\ntype Query {\n  test: Int\n}\n\n"
        )
```

### Enabling Logging

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.appsync_graphql_api import AppsyncGraphqlApi
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy_attachment import IamRolePolicyAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, authenticationType, name):
        super().__init__(scope, name)
        assume_role = DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["appsync.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        example = IamRole(self, "example",
            assume_role_policy=Token.as_string(assume_role.json),
            name="example"
        )
        aws_iam_role_policy_attachment_example = IamRolePolicyAttachment(self, "example_2",
            policy_arn="arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs",
            role=example.name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_attachment_example.override_logical_id("example")
        aws_appsync_graphql_api_example = AppsyncGraphqlApi(self, "example_3",
            log_config=AppsyncGraphqlApiLogConfig(
                cloudwatch_logs_role_arn=example.arn,
                field_log_level="ERROR"
            ),
            authentication_type=authentication_type,
            name=name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_appsync_graphql_api_example.override_logical_id("example")
```

### Associate Web ACL (v2)

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.appsync_graphql_api import AppsyncGraphqlApi
from imports.aws.wafv2_web_acl import Wafv2WebAcl
from imports.aws.wafv2_web_acl_association import Wafv2WebAclAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = AppsyncGraphqlApi(self, "example",
            authentication_type="API_KEY",
            name="example"
        )
        aws_wafv2_web_acl_example = Wafv2WebAcl(self, "example_1",
            default_action=Wafv2WebAclDefaultAction(
                allow=Wafv2WebAclDefaultActionAllow()
            ),
            description="Example of a managed rule.",
            name="managed-rule-example",
            rule=[Wafv2WebAclRule(
                name="rule-1",
                override_action=Wafv2WebAclRuleOverrideAction(
                    block=[{}]
                ),
                priority=1,
                statement=Wafv2WebAclRuleStatement(
                    managed_rule_group_statement=Wafv2WebAclRuleStatementManagedRuleGroupStatement(
                        name="AWSManagedRulesCommonRuleSet",
                        vendor_name="AWS"
                    )
                ),
                visibility_config=Wafv2WebAclRuleVisibilityConfig(
                    cloudwatch_metrics_enabled=False,
                    metric_name="friendly-rule-metric-name",
                    sampled_requests_enabled=False
                )
            )
            ],
            scope="REGIONAL",
            visibility_config=Wafv2WebAclVisibilityConfig(
                cloudwatch_metrics_enabled=False,
                metric_name="friendly-metric-name",
                sampled_requests_enabled=False
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_wafv2_web_acl_example.override_logical_id("example")
        aws_wafv2_web_acl_association_example = Wafv2WebAclAssociation(self, "example_2",
            resource_arn=example.arn,
            web_acl_arn=Token.as_string(aws_wafv2_web_acl_example.arn)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_wafv2_web_acl_association_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `authentication_type` - (Required) Authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`
* `name` - (Required) User-supplied name for the GraphqlApi.
* `log_config` - (Optional) Nested argument containing logging configuration. Defined below.
* `openid_connect_config` - (Optional) Nested argument containing OpenID Connect configuration. Defined below.
* `user_pool_config` - (Optional) Amazon Cognito User Pool configuration. Defined below.
* `lambda_authorizer_config` - (Optional) Nested argument containing Lambda authorizer configuration. Defined below.
* `schema` - (Optional) Schema definition, in GraphQL schema language format. Terraform cannot perform drift detection of this configuration.
* `additional_authentication_provider` - (Optional) One or more additional authentication providers for the GraphqlApi. Defined below.
* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `xray_enabled` - (Optional) Whether tracing with X-ray is enabled. Defaults to false.
* `visibility` - (Optional) Sets the value of the GraphQL API to public (`GLOBAL`) or private (`PRIVATE`). If no value is provided, the visibility will be set to `GLOBAL` by default. This value cannot be changed once the API has been created.

### log_config

This argument supports the following arguments:

* `cloudwatch_logs_role_arn` - (Required) Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.
* `field_log_level` - (Required) Field logging level. Valid values: `ALL`, `ERROR`, `NONE`.
* `exclude_verbose_content` - (Optional) Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: `true`, `false`. Default value: `false`

### additional_authentication_provider

This argument supports the following arguments:

* `authentication_type` - (Required) Authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`
* `openid_connect_config` - (Optional) Nested argument containing OpenID Connect configuration. Defined below.
* `user_pool_config` - (Optional) Amazon Cognito User Pool configuration. Defined below.

### openid_connect_config

This argument supports the following arguments:

* `issuer` - (Required) Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
* `auth_ttl` - (Optional) Number of milliseconds a token is valid after being authenticated.
* `client_id` - (Optional) Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
* `iat_ttl` - (Optional) Number of milliseconds a token is valid after being issued to a user.

### user_pool_config

This argument supports the following arguments:

* `default_action` - (Required only if Cognito is used as the default auth provider) Action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: `ALLOW` and `DENY`
* `user_pool_id` - (Required) User pool ID.
* `app_id_client_regex` - (Optional) Regular expression for validating the incoming Amazon Cognito User Pool app client ID.
* `aws_region` - (Optional) AWS region in which the user pool was created.

### lambda_authorizer_config

This argument supports the following arguments:

* `authorizer_uri` - (Required) ARN of the Lambda function to be called for authorization. Note: This Lambda function must have a resource-based policy assigned to it, to allow `lambda:InvokeFunction` from service principal `appsync.amazonaws.com`.
* `authorizer_result_ttl_in_seconds` - (Optional) Number of seconds a response should be cached for. The default is 5 minutes (300 seconds). The Lambda function can override this by returning a `ttlOverride` key in its response. A value of 0 disables caching of responses. Minimum value of 0. Maximum value of 3600.
* `identity_validation_expression` - (Optional) Regular expression for validation of tokens before the Lambda function is called.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - API ID
* `arn` - ARN
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `uris` - Map of URIs associated with the APIE.g., `uris["GRAPHQL"] = https://ID.appsync-api.REGION.amazonaws.com/graphql`

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AppSync GraphQL API using the GraphQL API ID. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
```

Using `terraform import`, import AppSync GraphQL API using the GraphQL API ID. For example:

```console
% terraform import aws_appsync_graphql_api.example 0123456789
```

<!-- cache-key: cdktf-0.19.0 input-604f59c6c350d24f978a0ba94f2c30cf28473a80d9b5a2275a86a5740a4b0ee4 -->