---
subcategory: "Amplify"
layout: "aws"
page_title: "AWS: aws_amplify_domain_association"
description: |-
  Provides an Amplify Domain Association resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_amplify_domain_association

Provides an Amplify Domain Association resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.amplify_app import AmplifyApp
from imports.aws.amplify_branch import AmplifyBranch
from imports.aws.amplify_domain_association import AmplifyDomainAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = AmplifyApp(self, "example",
            custom_rule=[AmplifyAppCustomRule(
                source="https://example.com",
                status="302",
                target="https://www.example.com"
            )
            ],
            name="app"
        )
        master = AmplifyBranch(self, "master",
            app_id=example.id,
            branch_name="master"
        )
        aws_amplify_domain_association_example = AmplifyDomainAssociation(self, "example_2",
            app_id=example.id,
            domain_name="example.com",
            sub_domain=[AmplifyDomainAssociationSubDomain(
                branch_name=master.branch_name,
                prefix=""
            ), AmplifyDomainAssociationSubDomain(
                branch_name=master.branch_name,
                prefix="www"
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_amplify_domain_association_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `app_id` - (Required) Unique ID for an Amplify app.
* `domain_name` - (Required) Domain name for the domain association.
* `enable_auto_sub_domain` - (Optional) Enables the automated creation of subdomains for branches.
* `sub_domain` - (Required) Setting for the subdomain. Documented below.
* `wait_for_verification` - (Optional) If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.

The `sub_domain` configuration block supports the following arguments:

* `branch_name` - (Required) Branch name setting for the subdomain.
* `prefix` - (Required) Prefix setting for the subdomain.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN for the domain association.
* `certificate_verification_dns_record` - The DNS record for certificate verification.

The `sub_domain` configuration block exports the following attributes:

* `dns_record` - DNS record for the subdomain.
* `verified` - Verified status of the subdomain.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Amplify domain association using `app_id` and `domain_name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
```

Using `terraform import`, import Amplify domain association using `app_id` and `domain_name`. For example:

```console
% terraform import aws_amplify_domain_association.app d2ypk4k47z8u6/example.com
```

<!-- cache-key: cdktf-0.19.0 input-10844d85ea1b0809e4b08cd8168c429bf0c742ec4760985072b9f61b55e19893 -->