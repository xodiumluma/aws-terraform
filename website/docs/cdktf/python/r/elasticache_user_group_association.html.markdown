---
subcategory: "ElastiCache"
layout: "aws"
page_title: "AWS: aws_elasticache_user_group_association"
description: |-
  Associate an ElastiCache user and user group.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_elasticache_user_group_association

Associate an existing ElastiCache user and an existing user group.

~> **NOTE:** Terraform will detect changes in the `aws_elasticache_user_group` since `aws_elasticache_user_group_association` changes the user IDs associated with the user group. You can ignore these changes with the `lifecycle` `ignore_changes` meta argument as shown in the example.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from cdktf import TerraformResourceLifecycle
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.elasticache_user import ElasticacheUser
from imports.aws.elasticache_user_group import ElasticacheUserGroup
from imports.aws.elasticache_user_group_association import ElasticacheUserGroupAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        default_var = ElasticacheUser(self, "default",
            access_string="on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
            engine="REDIS",
            passwords=["password123456789"],
            user_id="defaultUserID",
            user_name="default"
        )
        example = ElasticacheUser(self, "example",
            access_string="on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
            engine="REDIS",
            passwords=["password123456789"],
            user_id="exampleUserID",
            user_name="exampleuser"
        )
        aws_elasticache_user_group_example = ElasticacheUserGroup(self, "example_2",
            engine="REDIS",
            lifecycle=TerraformResourceLifecycle(
                ignore_changes=[user_ids]
            ),
            user_group_id="userGroupId",
            user_ids=[default_var.user_id]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_elasticache_user_group_example.override_logical_id("example")
        aws_elasticache_user_group_association_example =
        ElasticacheUserGroupAssociation(self, "example_3",
            user_group_id=Token.as_string(aws_elasticache_user_group_example.user_group_id),
            user_id=example.user_id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_elasticache_user_group_association_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `user_group_id` - (Required) ID of the user group.
* `user_id` - (Required) ID of the user to associated with the user group.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ElastiCache user group associations using the `user_group_id` and `user_id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
```

Using `terraform import`, import ElastiCache user group associations using the `user_group_id` and `user_id`. For example:

```console
% terraform import aws_elasticache_user_group_association.example userGoupId1,userId
```

<!-- cache-key: cdktf-0.19.0 input-0fb04431352bb053d0baffe8ca67747d1db14fc5f35be68ff3b233036b0d1ebf -->